`code`
import pandas as pd
import numpy as np

sa_crime_stats=pd.read_csv(r"C:\Users\user\Documents\TASKS\task_1\SouthAfricaCrimeStats_v2.csv")
print(sa_crime_stats['Station'].dtype)
###findin dataset information

print(sa_crime_stats.describe())
sa_crime_stats['Station']=sa_crime_stats['Station'].astype('string')

print(sa_crime_stats.info())
print(sa_crime_stats['Station'].dtype)

### Handling duplicates and missing data

print(sa_crime_stats.isnull().sum())
print(sa_crime_stats.duplicated().sum())
###clipping outliers
sa_crime_stats['clipped']= np.clip(sa_crime_stats['2011-2012'], a_min=sa_crime_stats['2011-2012'].quantile(0.05), a_max=sa_crime_stats['2011-2012'].quantile(0.95))
print(sa_crime_stats)

###Compare the crime rates across the five most frequent provinces for 2011-2012

top_provinces = sa_crime_stats['Province'].value_counts().nlargest(5).index
print(top_provinces)
filtered_df = sa_crime_stats[sa_crime_stats['Province'].isin(top_provinces)]
print(f"filtered sa crime: {filtered_df}")
crime_comparison = filtered_df.groupby('Province')['2011-2012']
print(f'crime comparison :{crime_comparison}')
crime_comparison_mean = filtered_df.groupby('Province')['2011-2012'].mean().sort_values(ascending=False)
print(crime_comparison_mean)

###highest and lowest crime rates

theft_data = sa_crime_stats[sa_crime_stats['Category'] == 'All theft not mentioned elsewhere']
theft_crime_rate = theft_data.groupby('Province')['2011-2012'].mean()
highest_province = theft_crime_rate.idxmax()
lowest_province = theft_crime_rate.idxmin()
print(f"Province with highest crime rate: {highest_province}")
print(f"Province with lowest crime rate: {lowest_province}")

###Ranking
numeric_cols =sa_crime_stats.select_dtypes(include=['number']).columns
#average for all numeric columns
mean_stations=sa_crime_stats.groupby('Station')[numeric_cols].mean()
print(mean_stations)

top_stations=mean_stations.nlargest(5,['2005-2006','2006-2007','2007-2008','2008-2009','2009-2010','2010-2011','2011-2012','2012-2013','2013-2014','2014-2015','2015-2016'])
print(top_stations)

###Identify the top 5 stations with the highest and lowest crime rates over the entire period.

highest_stations = top_stations.nlargest(5,['2005-2006','2006-2007','2007-2008','2008-2009','2009-2010','2010-2011','2011-2012','2012-2013','2013-2014','2014-2015','2015-2016'])
lowest_stations = top_stations.nsmallest(5,['2005-2006','2006-2007','2007-2008','2008-2009','2009-2010','2010-2011','2011-2012','2012-2013','2013-2014','2014-2015','2015-2016'])
print("Highest Crime Rate Stations:")
print(highest_stations)
print("Lowest Crime Rate Stations:")
print(lowest_stations)

###change Over Time

sort_stations=sa_crime_stats.sort_values(by='Station',ascending=False)
stations_all_years=sort_stations[['2005-2006','2006-2007','2007-2008','2008-2009','2009-2010','2010-2011','2011-2012','2012-2013','2013-2014','2014-2015','2015-2016']]
stations_diff=stations_all_years.diff(axis=1)

stations_decrease={}

for station, differences in stations_diff.iterrows():
    decrease_years = differences[differences == differences.min()].index.tolist()
    stations_decrease[station] = decrease_years
stations_decreases_sorted = {
    station: stations_decrease[station] for station in sorted(stations_decrease, key=lambda k: stations_diff.loc[k][stations_diff.loc[k] < 0].sum(), reverse=True)}
### Print the top stations with their respective years of decreases
top_decreases = list(stations_decreases_sorted.items())[:5]
for station, years in top_decreases:
    print(f"Station: {station}, Years of largest decrease: {years}")
top_descrease=stations_diff.sum(axis=1).nsmallest(5)
print(top_descrease)

highest_stations = top_stations.nlargest(5,['2005-2006','2006-2007','2007-2008','2008-2009','2009-2010','2010-2011','2011-2012','2012-2013','2013-2014','2014-2015','2015-2016'])
lowest_stations = top_stations.nsmallest(5,['2005-2006','2006-2007','2007-2008','2008-2009','2009-2010','2010-2011','2011-2012','2012-2013','2013-2014','2014-2015','2015-2016'])
print("Highest Crime Rate Stations:")
print(highest_stations)
print("Lowest Crime Rate Stations:")
print(lowest_stations)

##Plot the percentage change in crime rates for Pretoria Central, Cape Town Central, 
##Brooklyn, and Pretoria West stations over the years.

station_data=sa_crime_stats[sa_crime_stats['Station'].isin(['Cape Town Central','Pretoria Central','Brooklyn','Pretoria West'])]
station_trends=station_data.groupby('Station').sum(numeric_only=True).drop('clipped',axis=1)
province_crime_trends_pct =station_trends.T.pct_change()

###plotting
import matplotlib.pyplot as plt
plt.figure(figsize=(12, 6))

# Plot crime trends for each province
for Station in station_trends.index:
    plt.plot(station_trends.columns, station_trends.loc[Station], label=Station)

plt.xlabel("Year")
plt.ylabel("Total Crimes")
plt.title("Crime Trends in the 5 Most Frequent Provinces")
plt.legend()
plt.show()

###Aggregate the data at the province level (Use only the 5 most frequent provinces) and analyze the overall crime trends for each province

top_provinces_data=sa_crime_stats[sa_crime_stats['Province'].isin(top_provinces)]
province_trends=top_provinces_data.groupby('Province').sum(numeric_only=True).drop('clipped',axis=1)
province_crime_trends_pct = province_trends.T.pct_change()

###plotting
plt.figure(figsize=(12, 6))

# Plot crime trends for each province
for province in province_trends.index:
    plt.plot(province_trends.columns, province_trends.loc[province], label=province)

plt.xlabel("Year")
plt.ylabel("Total Crimes")
plt.title("Crime Trends in the 5 Most Frequent Provinces")
plt.legend()
plt.show()

###Identify provinces (Use only the 5 most frequent provinces) where certain categories of crime are more prevalent
top=sa_crime_stats['Province'].value_counts().nlargest().index
print(top)
sa_top_provinces=sa_crime_stats[sa_crime_stats['Province'].isin(top)]
print(sa_top_provinces)
crime_by_province_trends=sa_top_provinces.groupby(['Province','Category']).sum(numeric_only=True)
print(crime_by_province_trends)
most_prevalent_crimes_pct= crime_by_province_trends.T.pct_change()
crime_by_province_trends=crime_by_province_trends.reset_index()
print(crime_by_province_trends.sort_index(ascending=True).head())
### the end
